{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.9;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n *\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\n * recovery.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        uint256 calldataLength = msg.data.length;\n        uint256 contextSuffixLength = _contextSuffixLength();\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\n            return msg.data[:calldataLength - contextSuffixLength];\n        } else {\n            return super._msgData();\n        }\n    }\n\n    /**\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\n     */\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\n        return 20;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/GameEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { ERC2771Context } from \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport { Context } from \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface IPlanetNFT {\n    function ownedPlanet(address owner) external view returns (uint256);\n\n    function recordGameResult(uint256 tokenId, uint256 dayId, uint8[] calldata counts) external;\n}\n\ncontract GameEngine is ERC2771Context, Ownable {\n    uint8 public immutable WAVE_COUNT;\n    uint8 public immutable WAVE_SIZE;\n    uint16 public immutable TOTAL_ENEMIES; // WAVE_COUNT * WAVE_SIZE\n    uint40 public immutable TIMEOUT_BLOCKS;\n\n    uint8 public enemyTypesCount; // client maps [0..enemyTypesCount-1] -> image file\n\n    // Redstone Price Feed Addresses\n    AggregatorV3Interface internal ethPriceFeed;\n    AggregatorV3Interface internal btcPriceFeed;\n    AggregatorV3Interface internal pufEthPriceFeed;\n\n    // Price feeds enabled flag\n    bool public priceFeedsEnabled;\n\n    // Planet NFT\n    IPlanetNFT public planetNFT;\n\n    // Betting constants\n    uint256 public constant FEE_BPS = 2000; // 20%\n    uint256 public constant BPS = 10000;\n\n    struct Session {\n        bytes32 seed;\n        uint40 startBlock;\n        bool exists;\n    }\n\n    struct Play {\n        bytes32 seed;\n        uint40 startBlock;\n        uint40 endBlock;\n        uint8[] counts; // length == enemyTypesCount at the time of play\n    }\n\n    mapping(address => Session) private _activeSession;\n    mapping(address => Play[]) private _plays;\n\n    uint256 private _nonce;\n\n    // --- Daily defeats (from submitted results) ---\n    // dayId => coinId => defeats\n    mapping(uint256 => mapping(uint8 => uint256)) public dailyDefeats;\n\n    // --- Betting state ---\n    // dayId => total staked (all coins)\n    mapping(uint256 => uint256) public totalStaked;\n    // dayId => coinId => total staked on that coin\n    mapping(uint256 => mapping(uint8 => uint256)) public stakedPerCoin;\n    // dayId => user => coinId => stake\n    mapping(uint256 => mapping(address => mapping(uint8 => uint256))) public userStakePerCoin;\n\n    // Settlement\n    mapping(uint256 => bool) public daySettled;\n    mapping(uint256 => uint8) public dayWinningCoin;\n    // Locked denominators and payout pool at settlement time\n    mapping(uint256 => uint256) public dayWinnersStake; // sum of stakes on the winning coin\n    mapping(uint256 => uint256) public dayPayoutPool; // totalStaked * (BPS - FEE_BPS) / BPS\n    // Claims\n    mapping(uint256 => mapping(address => bool)) public hasClaimed;\n\n    // Events\n    event GameCompleted(\n        address indexed player,\n        uint256 indexed planetId,\n        uint256 indexed dayId,\n        bytes32 seed,\n        uint40 startBlock,\n        uint40 endBlock,\n        uint8[] counts,\n        uint256 totalDefeats\n    );\n\n    constructor(\n        address _planetNFT,\n        uint8 _enemyTypesCount,\n        uint8 _waveCount,\n        uint8 _waveSize,\n        uint40 _timeoutBlocks,\n        address trustedForwarder\n    ) Ownable() ERC2771Context(trustedForwarder) {\n        require(_enemyTypesCount > 0, \"enemy types = 0\");\n        require(_planetNFT != address(0), \"planet addr=0\");\n        planetNFT = IPlanetNFT(_planetNFT);\n\n        enemyTypesCount = _enemyTypesCount;\n        WAVE_COUNT = _waveCount;\n        WAVE_SIZE = _waveSize;\n        TOTAL_ENEMIES = uint16(uint256(_waveCount) * uint256(_waveSize));\n        TIMEOUT_BLOCKS = _timeoutBlocks;\n\n        // Initialize Redstone price feeds (only if addresses are valid)\n        if (_areValidAddresses()) {\n            ethPriceFeed = AggregatorV3Interface(0x72266eFcdd0EC7110b44576e5413EF383950EEc2);\n            btcPriceFeed = AggregatorV3Interface(0xCfd39de761508A7aCb8C931b959127a1D9d0B3D4);\n            pufEthPriceFeed = AggregatorV3Interface(0xE7e734789954e6CffD8C295CBD0916A0A5747D27);\n            priceFeedsEnabled = true;\n        } else {\n            priceFeedsEnabled = false;\n        }\n    }\n\n    // --- Admin ---\n\n    function setEnemyTypesCount(uint8 newCount) external onlyOwner {\n        require(newCount > 0, \"enemy types = 0\");\n        enemyTypesCount = newCount;\n    }\n\n    function setPriceFeeds(address _ethPriceFeed, address _btcPriceFeed, address _pufEthPriceFeed) external onlyOwner {\n        ethPriceFeed = AggregatorV3Interface(_ethPriceFeed);\n        btcPriceFeed = AggregatorV3Interface(_btcPriceFeed);\n        pufEthPriceFeed = AggregatorV3Interface(_pufEthPriceFeed);\n        priceFeedsEnabled = true; // Enable when manually set\n    }\n\n    function disablePriceFeeds() external onlyOwner {\n        priceFeedsEnabled = false;\n    }\n\n    // --- Helper Functions ---\n\n    function _areValidAddresses() internal view returns (bool) {\n        // Simple check to see if we're on a network that has these contracts\n        // This is a basic heuristic - in production you'd want more robust checks\n        return block.chainid != 31337 && block.chainid != 1337; // Exclude Hardhat and Ganache\n    }\n\n    // --- Price Feed Functions ---\n\n    function getLatestPrices() public view returns (int256 ethPrice, int256 btcPrice, int256 pufEthPrice) {\n        if (!priceFeedsEnabled) {\n            // Return fallback values when price feeds are disabled\n            return (2000 * 10 ** 8, 40000 * 10 ** 8, 1800 * 10 ** 8); // Mock prices in 8 decimal format\n        }\n\n        try ethPriceFeed.latestRoundData() returns (uint80, int256 _ethPrice, uint256, uint256, uint80) {\n            ethPrice = _ethPrice;\n        } catch {\n            ethPrice = 2000 * 10 ** 8; // Fallback ETH price\n        }\n\n        try btcPriceFeed.latestRoundData() returns (uint80, int256 _btcPrice, uint256, uint256, uint80) {\n            btcPrice = _btcPrice;\n        } catch {\n            btcPrice = 40000 * 10 ** 8; // Fallback BTC price\n        }\n\n        try pufEthPriceFeed.latestRoundData() returns (uint80, int256 _pufEthPrice, uint256, uint256, uint80) {\n            pufEthPrice = _pufEthPrice;\n        } catch {\n            pufEthPrice = 1800 * 10 ** 8; // Fallback pufETH price\n        }\n    }\n\n    function generateFunRandomness() internal view returns (bytes32) {\n        // Get latest prices from Redstone oracle\n        (int256 ethPrice, int256 btcPrice, int256 pufEthPrice) = getLatestPrices();\n\n        // Combine multiple sources of (not)randomness to create one:\n        // 1. Previous block hash\n        // 2. Current block's prevrandao\n        // 3. Player address\n        // 4. Nonce\n        // 5. ETH price\n        // 6. BTC price\n        // 7. pufETH price\n        // 8. Block timestamp\n        return\n            keccak256(\n                abi.encodePacked(\n                    blockhash(block.number - 1),\n                    block.prevrandao,\n                    _msgSender(),\n                    _nonce,\n                    ethPrice,\n                    btcPrice,\n                    pufEthPrice,\n                    block.timestamp\n                )\n            );\n    }\n\n    // --- Session lifecycle ---\n\n    function hasActiveSession(address player) public view returns (bool) {\n        Session memory s = _activeSession[player];\n        if (!s.exists) return false;\n        if (block.number > s.startBlock + TIMEOUT_BLOCKS) return false;\n        return true;\n    }\n\n    function getActiveSession(\n        address player\n    ) external view returns (bytes32 seed, uint40 startBlock, uint40 deadline, bool active) {\n        Session memory s = _activeSession[player];\n        if (!s.exists) {\n            return (bytes32(0), 0, 0, false);\n        }\n        uint40 dl = s.startBlock + TIMEOUT_BLOCKS;\n        bool isActive = block.number <= dl;\n        return (s.seed, s.startBlock, dl, isActive);\n    }\n\n    function startGame() external {\n        require(enemyTypesCount > 0, \"no enemies\");\n        // Require a PlanetNFT to play\n        require(planetNFT.ownedPlanet(_msgSender()) != 0, \"need planet\");\n        // Enforce one active session; allow restart if expired\n        Session memory s = _activeSession[_msgSender()];\n        if (s.exists) {\n            require(block.number > s.startBlock + TIMEOUT_BLOCKS, \"active session\");\n        }\n\n        // Enhanced randomness using Redstone price feeds + blockchain data\n        _nonce++;\n        bytes32 seed = generateFunRandomness();\n        _activeSession[_msgSender()] = Session({ seed: seed, startBlock: uint40(block.number), exists: true });\n    }\n\n    // Returns the full schedule (150 uint8 IDs) for the caller's active session\n    function getMySchedule() external view returns (uint8[] memory seq) {\n        return getScheduleFor(_msgSender());\n    }\n\n    function getScheduleFor(address player) public view returns (uint8[] memory seq) {\n        Session memory s = _activeSession[player];\n        require(s.exists, \"no session\");\n        seq = new uint8[](TOTAL_ENEMIES);\n        for (uint16 i = 0; i < TOTAL_ENEMIES; i++) {\n            uint256 r = uint256(keccak256(abi.encodePacked(s.seed, i)));\n            seq[i] = uint8(r % enemyTypesCount);\n        }\n    }\n\n    // Submit results; stores the play and clears session\n    function submitResults(uint8[] calldata counts) external {\n        Session memory s = _activeSession[_msgSender()];\n        require(s.exists, \"no session\");\n        require(block.number <= s.startBlock + TIMEOUT_BLOCKS, \"session expired\");\n        require(counts.length == enemyTypesCount, \"bad length\");\n\n        // Store the play\n        uint8[] memory copy = new uint8[](counts.length);\n        for (uint256 i = 0; i < counts.length; i++) {\n            copy[i] = counts[i];\n        }\n        _plays[_msgSender()].push(\n            Play({ seed: s.seed, startBlock: s.startBlock, endBlock: uint40(block.number), counts: copy })\n        );\n\n        // Update daily defeats tallies and persist to NFT attributes\n        uint256 dayId = block.timestamp / 1 days;\n        uint256 totalDefeats = 0;\n        for (uint256 i = 0; i < counts.length; i++) {\n            dailyDefeats[dayId][uint8(i)] += counts[i];\n            totalDefeats += counts[i];\n        }\n        uint256 tokenId = planetNFT.ownedPlanet(_msgSender());\n        // tokenId must be non-zero since we require it in startGame\n        planetNFT.recordGameResult(tokenId, dayId, counts);\n\n        // Emit game completion event\n        emit GameCompleted(\n            _msgSender(),\n            tokenId,\n            dayId,\n            s.seed,\n            s.startBlock,\n            uint40(block.number),\n            counts,\n            totalDefeats\n        );\n\n        delete _activeSession[_msgSender()];\n    }\n\n    // --- History ---\n\n    function getPlaysCount(address player) external view returns (uint256) {\n        return _plays[player].length;\n    }\n\n    function getPlay(\n        address player,\n        uint256 index\n    ) external view returns (bytes32 seed, uint40 startBlock, uint40 endBlock, uint8[] memory counts) {\n        Play storage p = _plays[player][index];\n        return (p.seed, p.startBlock, p.endBlock, p.counts);\n    }\n\n    // --- Betting ---\n\n    function placeBet(uint8 coinId) external payable {\n        require(msg.value > 0, \"no value\");\n        require(coinId < enemyTypesCount, \"bad coin\");\n        uint256 dayId = block.timestamp / 1 days;\n        require(!daySettled[dayId], \"day settled\");\n\n        totalStaked[dayId] += msg.value;\n        stakedPerCoin[dayId][coinId] += msg.value;\n        userStakePerCoin[dayId][_msgSender()][coinId] += msg.value;\n    }\n\n    function settleDay(uint256 dayId) external onlyOwner {\n        require(!daySettled[dayId], \"already settled\");\n\n        // Compute winning coin (most defeats) with deterministic tie-breaker (lowest coinId)\n        uint8 winning = 0;\n        uint256 maxDefeats = 0;\n        uint256 totalDefeatsSum = 0;\n        for (uint8 i = 0; i < enemyTypesCount; i++) {\n            uint256 d = dailyDefeats[dayId][i];\n            totalDefeatsSum += d;\n            if (d > maxDefeats) {\n                maxDefeats = d;\n                winning = i;\n            }\n        }\n        require(totalDefeatsSum > 0, \"no defeats\");\n\n        daySettled[dayId] = true;\n        dayWinningCoin[dayId] = winning;\n\n        uint256 winnersStake = stakedPerCoin[dayId][winning];\n        dayWinnersStake[dayId] = winnersStake;\n\n        if (winnersStake == 0) {\n            // No winners; per spec funds remain in contract (treasury)\n            dayPayoutPool[dayId] = 0;\n        } else {\n            uint256 pool = totalStaked[dayId];\n            uint256 payout = (pool * (BPS - FEE_BPS)) / BPS; // 80% to winners\n            dayPayoutPool[dayId] = payout;\n        }\n    }\n\n    function claim(uint256 dayId) external {\n        require(daySettled[dayId], \"not settled\");\n        require(!hasClaimed[dayId][_msgSender()], \"claimed\");\n\n        uint8 winning = dayWinningCoin[dayId];\n        uint256 winnersStake = dayWinnersStake[dayId];\n        require(winnersStake > 0, \"no winners\");\n\n        uint256 userStake = userStakePerCoin[dayId][_msgSender()][winning];\n        require(userStake > 0, \"no stake\");\n\n        uint256 payoutPool = dayPayoutPool[dayId];\n        uint256 amount = (payoutPool * userStake) / winnersStake;\n\n        hasClaimed[dayId][_msgSender()] = true;\n\n        (bool ok, ) = payable(_msgSender()).call{ value: amount }(\"\");\n        require(ok, \"transfer failed\");\n    }\n\n    // --- Views for UI ---\n\n    function getDayInfo(\n        uint256 dayId\n    )\n        external\n        view\n        returns (\n            bool settled,\n            uint8 winningCoin,\n            uint256 totalPool,\n            uint256[] memory stakesPerCoin,\n            uint256[] memory defeatsPerCoin\n        )\n    {\n        settled = daySettled[dayId];\n        winningCoin = dayWinningCoin[dayId];\n        totalPool = totalStaked[dayId];\n\n        stakesPerCoin = new uint256[](enemyTypesCount);\n        defeatsPerCoin = new uint256[](enemyTypesCount);\n        for (uint8 i = 0; i < enemyTypesCount; i++) {\n            stakesPerCoin[i] = stakedPerCoin[dayId][i];\n            defeatsPerCoin[i] = dailyDefeats[dayId][i];\n        }\n    }\n\n    function getUserStake(uint256 dayId, address user) external view returns (uint256[] memory stakesPerCoin) {\n        stakesPerCoin = new uint256[](enemyTypesCount);\n        for (uint8 i = 0; i < enemyTypesCount; i++) {\n            stakesPerCoin[i] = userStakePerCoin[dayId][user][i];\n        }\n    }\n\n    function feeBasisPoints() external pure returns (uint256) {\n        return FEE_BPS;\n    }\n\n    // --- ERC2771 overrides ---\n    function _msgSender() internal view override(Context, ERC2771Context) returns (address sender) {\n        return ERC2771Context._msgSender();\n    }\n\n    function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {\n        return ERC2771Context._msgData();\n    }\n\n    function _contextSuffixLength() internal view override(Context, ERC2771Context) returns (uint256) {\n        return ERC2771Context._contextSuffixLength();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}