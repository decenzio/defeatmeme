{
  "address": "0xbE26447458f1AdC474e1AF3a4adb27e3B7b58A64",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_planetNFT",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_enemyTypesCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_waveCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_waveSize",
          "type": "uint8"
        },
        {
          "internalType": "uint40",
          "name": "_timeoutBlocks",
          "type": "uint40"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "planetId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "dayId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "startBlock",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "endBlock",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint8[]",
          "name": "counts",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDefeats",
          "type": "uint256"
        }
      ],
      "name": "GameCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMEOUT_BLOCKS",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOTAL_ENEMIES",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVE_COUNT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVE_SIZE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dayId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "dailyDefeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayPayoutPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "daySettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayWinnersStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayWinningCoin",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disablePriceFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enemyTypesCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBasisPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getActiveSession",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "startBlock",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "deadline",
          "type": "uint40"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dayId",
          "type": "uint256"
        }
      ],
      "name": "getDayInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "winningCoin",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "stakesPerCoin",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "defeatsPerCoin",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrices",
      "outputs": [
        {
          "internalType": "int256",
          "name": "ethPrice",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "btcPrice",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "pufEthPrice",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMySchedule",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "seq",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlay",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "seed",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "startBlock",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock",
          "type": "uint40"
        },
        {
          "internalType": "uint8[]",
          "name": "counts",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getPlaysCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getScheduleFor",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "seq",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dayId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "stakesPerCoin",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "hasActiveSession",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "coinId",
          "type": "uint8"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "planetNFT",
      "outputs": [
        {
          "internalType": "contract IPlanetNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newCount",
          "type": "uint8"
        }
      ],
      "name": "setEnemyTypesCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_planetNFT",
          "type": "address"
        }
      ],
      "name": "setPlanetNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btcPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pufEthPriceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dayId",
          "type": "uint256"
        }
      ],
      "name": "settleDay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "stakedPerCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "counts",
          "type": "uint8[]"
        }
      ],
      "name": "submitResults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "userStakePerCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x29998090f4351f8a77ddabfd48a631a6a16949b68458f64073e029d0b577432b",
  "receipt": {
    "to": null,
    "from": "0x18146faA123A740Ee1EFC935d07208930d9018C2",
    "contractAddress": "0xbE26447458f1AdC474e1AF3a4adb27e3B7b58A64",
    "transactionIndex": 1,
    "gasUsed": "2458900",
    "logsBloom": "0x
    "blockHash": "0x6b7b9b6d4d23bddcced6b9a9ed9d09a7066f3a0abfb657506b8769e5073a159d",
    "transactionHash": "0x29998090f4351f8a77ddabfd48a631a6a16949b68458f64073e029d0b577432b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 8441872,
        "transactionHash": "0x29998090f4351f8a77ddabfd48a631a6a16949b68458f64073e029d0b577432b",
        "address": "0xbE26447458f1AdC474e1AF3a4adb27e3B7b58A64",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000018146faa123a740ee1efc935d07208930d9018c2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6b7b9b6d4d23bddcced6b9a9ed9d09a7066f3a0abfb657506b8769e5073a159d"
      }
    ],
    "blockNumber": 8441872,
    "cumulativeGasUsed": "2507395",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d0D35d407f45Bc5DCd79Ca0a27f5a003d5cec60",
    9,
    10,
    5,
    40,
    "0xE7806B788DEDd5a76e8D7b392167d276C55a6840"
  ],
  "numDeployments": 3,
  "solcInputHash": "1a7983d538cb5256dfa7babfca12f388",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_planetNFT\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_enemyTypesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_waveCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_waveSize\",\"type\":\"uint8\"},{\"internalType\":\"uint40\",\"name\":\"_timeoutBlocks\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"planetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dayId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint8[]\",\"name\":\"counts\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDefeats\",\"type\":\"uint256\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMEOUT_BLOCKS\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_ENEMIES\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVE_COUNT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVE_SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"dailyDefeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayPayoutPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daySettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayWinnersStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayWinningCoin\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disablePriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enemyTypesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getActiveSession\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"deadline\",\"type\":\"uint40\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayId\",\"type\":\"uint256\"}],\"name\":\"getDayInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"winningCoin\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakesPerCoin\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"defeatsPerCoin\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrices\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"ethPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"btcPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"pufEthPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMySchedule\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"seq\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlay\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint8[]\",\"name\":\"counts\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getPlaysCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getScheduleFor\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"seq\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakesPerCoin\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"hasActiveSession\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"coinId\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planetNFT\",\"outputs\":[{\"internalType\":\"contract IPlanetNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newCount\",\"type\":\"uint8\"}],\"name\":\"setEnemyTypesCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_planetNFT\",\"type\":\"address\"}],\"name\":\"setPlanetNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btcPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pufEthPriceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayId\",\"type\":\"uint256\"}],\"name\":\"settleDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"stakedPerCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"counts\",\"type\":\"uint8[]\"}],\"name\":\"submitResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"userStakePerCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setPlanetNFT(address)\":{\"notice\":\"Update PlanetNFT contract reference in case of redeploys\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameEngine.sol\":\"GameEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\",\"keccak256\":\"0xb1bf6c03803f1f391babddb37bf312ef2f310891bb08b1c234ddb98355ba1f21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/GameEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC2771Context } from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IPlanetNFT {\\n    function ownedPlanet(address owner) external view returns (uint256);\\n\\n    function recordGameResult(uint256 tokenId, uint256 dayId, uint8[] calldata counts) external;\\n}\\n\\ncontract GameEngine is ERC2771Context, Ownable {\\n    uint8 public immutable WAVE_COUNT;\\n    uint8 public immutable WAVE_SIZE;\\n    uint16 public immutable TOTAL_ENEMIES; // WAVE_COUNT * WAVE_SIZE\\n    uint40 public immutable TIMEOUT_BLOCKS;\\n\\n    uint8 public enemyTypesCount; // client maps [0..enemyTypesCount-1] -> image file\\n\\n    // Redstone Price Feed Addresses\\n    AggregatorV3Interface internal ethPriceFeed;\\n    AggregatorV3Interface internal btcPriceFeed;\\n    AggregatorV3Interface internal pufEthPriceFeed;\\n\\n    // Price feeds enabled flag\\n    bool public priceFeedsEnabled;\\n\\n    // Planet NFT\\n    IPlanetNFT public planetNFT;\\n\\n    // Betting constants\\n    uint256 public constant FEE_BPS = 2000; // 20%\\n    uint256 public constant BPS = 10000;\\n\\n    struct Session {\\n        bytes32 seed;\\n        uint40 startBlock;\\n        bool exists;\\n    }\\n\\n    struct Play {\\n        bytes32 seed;\\n        uint40 startBlock;\\n        uint40 endBlock;\\n        uint8[] counts; // length == enemyTypesCount at the time of play\\n    }\\n\\n    mapping(address => Session) private _activeSession;\\n    mapping(address => Play[]) private _plays;\\n\\n    uint256 private _nonce;\\n\\n    // --- Daily defeats (from submitted results) ---\\n    // dayId => coinId => defeats\\n    mapping(uint256 => mapping(uint8 => uint256)) public dailyDefeats;\\n\\n    // --- Betting state ---\\n    // dayId => total staked (all coins)\\n    mapping(uint256 => uint256) public totalStaked;\\n    // dayId => coinId => total staked on that coin\\n    mapping(uint256 => mapping(uint8 => uint256)) public stakedPerCoin;\\n    // dayId => user => coinId => stake\\n    mapping(uint256 => mapping(address => mapping(uint8 => uint256))) public userStakePerCoin;\\n\\n    // Settlement\\n    mapping(uint256 => bool) public daySettled;\\n    mapping(uint256 => uint8) public dayWinningCoin;\\n    // Locked denominators and payout pool at settlement time\\n    mapping(uint256 => uint256) public dayWinnersStake; // sum of stakes on the winning coin\\n    mapping(uint256 => uint256) public dayPayoutPool; // totalStaked * (BPS - FEE_BPS) / BPS\\n    // Claims\\n    mapping(uint256 => mapping(address => bool)) public hasClaimed;\\n\\n    // Events\\n    event GameCompleted(\\n        address indexed player,\\n        uint256 indexed planetId,\\n        uint256 indexed dayId,\\n        bytes32 seed,\\n        uint40 startBlock,\\n        uint40 endBlock,\\n        uint8[] counts,\\n        uint256 totalDefeats\\n    );\\n\\n    constructor(\\n        address _planetNFT,\\n        uint8 _enemyTypesCount,\\n        uint8 _waveCount,\\n        uint8 _waveSize,\\n        uint40 _timeoutBlocks,\\n        address trustedForwarder\\n    ) Ownable() ERC2771Context(trustedForwarder) {\\n        require(_enemyTypesCount > 0, \\\"enemy types = 0\\\");\\n        require(_planetNFT != address(0), \\\"planet addr=0\\\");\\n        planetNFT = IPlanetNFT(_planetNFT);\\n\\n        enemyTypesCount = _enemyTypesCount;\\n        WAVE_COUNT = _waveCount;\\n        WAVE_SIZE = _waveSize;\\n        TOTAL_ENEMIES = uint16(uint256(_waveCount) * uint256(_waveSize));\\n        TIMEOUT_BLOCKS = _timeoutBlocks;\\n\\n        // Initialize Redstone price feeds (only if addresses are valid)\\n        if (_areValidAddresses()) {\\n            ethPriceFeed = AggregatorV3Interface(0x72266eFcdd0EC7110b44576e5413EF383950EEc2);\\n            //btcPriceFeed = AggregatorV3Interface(0xCfd39de761508A7aCb8C931b959127a1D9d0B3D4);\\n            //pufEthPriceFeed = AggregatorV3Interface(0xE7e734789954e6CffD8C295CBD0916A0A5747D27);\\n            priceFeedsEnabled = true;\\n        } else {\\n            priceFeedsEnabled = false;\\n        }\\n    }\\n\\n    // --- Admin ---\\n\\n    function setEnemyTypesCount(uint8 newCount) external onlyOwner {\\n        require(newCount > 0, \\\"enemy types = 0\\\");\\n        enemyTypesCount = newCount;\\n    }\\n\\n    function setPriceFeeds(address _ethPriceFeed, address _btcPriceFeed, address _pufEthPriceFeed) external onlyOwner {\\n        ethPriceFeed = AggregatorV3Interface(_ethPriceFeed);\\n        btcPriceFeed = AggregatorV3Interface(_btcPriceFeed);\\n        pufEthPriceFeed = AggregatorV3Interface(_pufEthPriceFeed);\\n        priceFeedsEnabled = true; // Enable when manually set\\n    }\\n\\n    function disablePriceFeeds() external onlyOwner {\\n        priceFeedsEnabled = false;\\n    }\\n\\n    /// @notice Update PlanetNFT contract reference in case of redeploys\\n    function setPlanetNFT(address _planetNFT) external onlyOwner {\\n        require(_planetNFT != address(0), \\\"planet addr=0\\\");\\n        planetNFT = IPlanetNFT(_planetNFT);\\n    }\\n\\n    // --- Helper Functions ---\\n\\n    function _areValidAddresses() internal view returns (bool) {\\n        // Simple check to see if we're on a network that has these contracts\\n        // This is a basic heuristic - in production you'd want more robust checks\\n        return block.chainid != 31337 && block.chainid != 1337; // Exclude Hardhat and Ganache\\n    }\\n\\n    // --- Price Feed Functions ---\\n\\n    function getLatestPrices() public view returns (int256 ethPrice, int256 btcPrice, int256 pufEthPrice) {\\n        if (!priceFeedsEnabled) {\\n            // Return fallback values when price feeds are disabled\\n            return (2000 * 10 ** 8, 40000 * 10 ** 8, 1800 * 10 ** 8); // Mock prices in 8 decimal format\\n        }\\n\\n        try ethPriceFeed.latestRoundData() returns (uint80, int256 _ethPrice, uint256, uint256, uint80) {\\n            ethPrice = _ethPrice;\\n        } catch {\\n            ethPrice = 2000 * 10 ** 8; // Fallback ETH price\\n        }\\n\\n        try btcPriceFeed.latestRoundData() returns (uint80, int256 _btcPrice, uint256, uint256, uint80) {\\n            btcPrice = _btcPrice;\\n        } catch {\\n            btcPrice = 40000 * 10 ** 8; // Fallback BTC price\\n        }\\n\\n        try pufEthPriceFeed.latestRoundData() returns (uint80, int256 _pufEthPrice, uint256, uint256, uint80) {\\n            pufEthPrice = _pufEthPrice;\\n        } catch {\\n            pufEthPrice = 1800 * 10 ** 8; // Fallback pufETH price\\n        }\\n    }\\n\\n    function generateFunRandomness() internal view returns (bytes32) {\\n        // Get latest prices from Redstone oracle\\n        (int256 ethPrice, int256 btcPrice, int256 pufEthPrice) = getLatestPrices();\\n\\n        // Combine multiple sources of (not)randomness to create one:\\n        // 1. Previous block hash\\n        // 2. Current block's prevrandao\\n        // 3. Player address\\n        // 4. Nonce\\n        // 5. ETH price\\n        // 6. BTC price\\n        // 7. pufETH price\\n        // 8. Block timestamp\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    blockhash(block.number - 1),\\n                    block.prevrandao,\\n                    _msgSender(),\\n                    _nonce,\\n                    ethPrice,\\n                    btcPrice,\\n                    pufEthPrice,\\n                    block.timestamp\\n                )\\n            );\\n    }\\n\\n    // --- Session lifecycle ---\\n\\n    function hasActiveSession(address player) public view returns (bool) {\\n        Session memory s = _activeSession[player];\\n        if (!s.exists) return false;\\n        if (block.number > s.startBlock + TIMEOUT_BLOCKS) return false;\\n        return true;\\n    }\\n\\n    function getActiveSession(\\n        address player\\n    ) external view returns (bytes32 seed, uint40 startBlock, uint40 deadline, bool active) {\\n        Session memory s = _activeSession[player];\\n        if (!s.exists) {\\n            return (bytes32(0), 0, 0, false);\\n        }\\n        uint40 dl = s.startBlock + TIMEOUT_BLOCKS;\\n        bool isActive = block.number <= dl;\\n        return (s.seed, s.startBlock, dl, isActive);\\n    }\\n\\n    function startGame() external {\\n        require(enemyTypesCount > 0, \\\"no enemies\\\");\\n        // Require a PlanetNFT to play\\n        require(planetNFT.ownedPlanet(_msgSender()) != 0, \\\"need planet\\\");\\n        // Enforce one active session; allow restart if expired\\n        Session memory s = _activeSession[_msgSender()];\\n        if (s.exists) {\\n            require(block.number > s.startBlock + TIMEOUT_BLOCKS, \\\"active session\\\");\\n        }\\n\\n        // Enhanced randomness using Redstone price feeds + blockchain data\\n        _nonce++;\\n        bytes32 seed = generateFunRandomness();\\n        _activeSession[_msgSender()] = Session({ seed: seed, startBlock: uint40(block.number), exists: true });\\n    }\\n\\n    // Returns the full schedule (150 uint8 IDs) for the caller's active session\\n    function getMySchedule() external view returns (uint8[] memory seq) {\\n        return getScheduleFor(_msgSender());\\n    }\\n\\n    function getScheduleFor(address player) public view returns (uint8[] memory seq) {\\n        Session memory s = _activeSession[player];\\n        require(s.exists, \\\"no session\\\");\\n        seq = new uint8[](TOTAL_ENEMIES);\\n        for (uint16 i = 0; i < TOTAL_ENEMIES; i++) {\\n            uint256 r = uint256(keccak256(abi.encodePacked(s.seed, i)));\\n            seq[i] = uint8(r % enemyTypesCount);\\n        }\\n    }\\n\\n    // Submit results; stores the play and clears session\\n    function submitResults(uint8[] calldata counts) external {\\n        Session memory s = _activeSession[_msgSender()];\\n        require(s.exists, \\\"no session\\\");\\n        require(block.number <= s.startBlock + TIMEOUT_BLOCKS, \\\"session expired\\\");\\n        require(counts.length == enemyTypesCount, \\\"bad length\\\");\\n\\n        // Store the play\\n        uint8[] memory copy = new uint8[](counts.length);\\n        for (uint256 i = 0; i < counts.length; i++) {\\n            copy[i] = counts[i];\\n        }\\n        _plays[_msgSender()].push(\\n            Play({ seed: s.seed, startBlock: s.startBlock, endBlock: uint40(block.number), counts: copy })\\n        );\\n\\n        // Update daily defeats tallies and persist to NFT attributes\\n        uint256 dayId = block.timestamp / 1 days;\\n        uint256 totalDefeats = 0;\\n        for (uint256 i = 0; i < counts.length; i++) {\\n            dailyDefeats[dayId][uint8(i)] += counts[i];\\n            totalDefeats += counts[i];\\n        }\\n        uint256 tokenId = planetNFT.ownedPlanet(_msgSender());\\n        // tokenId must be non-zero since we require it in startGame\\n        planetNFT.recordGameResult(tokenId, dayId, counts);\\n\\n        // Emit game completion event\\n        emit GameCompleted(\\n            _msgSender(),\\n            tokenId,\\n            dayId,\\n            s.seed,\\n            s.startBlock,\\n            uint40(block.number),\\n            counts,\\n            totalDefeats\\n        );\\n\\n        delete _activeSession[_msgSender()];\\n    }\\n\\n    // --- History ---\\n\\n    function getPlaysCount(address player) external view returns (uint256) {\\n        return _plays[player].length;\\n    }\\n\\n    function getPlay(\\n        address player,\\n        uint256 index\\n    ) external view returns (bytes32 seed, uint40 startBlock, uint40 endBlock, uint8[] memory counts) {\\n        Play storage p = _plays[player][index];\\n        return (p.seed, p.startBlock, p.endBlock, p.counts);\\n    }\\n\\n    // --- Betting ---\\n\\n    function placeBet(uint8 coinId) external payable {\\n        require(msg.value > 0, \\\"no value\\\");\\n        require(coinId < enemyTypesCount, \\\"bad coin\\\");\\n        uint256 dayId = block.timestamp / 1 days;\\n        require(!daySettled[dayId], \\\"day settled\\\");\\n\\n        totalStaked[dayId] += msg.value;\\n        stakedPerCoin[dayId][coinId] += msg.value;\\n        userStakePerCoin[dayId][_msgSender()][coinId] += msg.value;\\n    }\\n\\n    function settleDay(uint256 dayId) external onlyOwner {\\n        require(!daySettled[dayId], \\\"already settled\\\");\\n\\n        // Compute winning coin (most defeats) with deterministic tie-breaker (lowest coinId)\\n        uint8 winning = 0;\\n        uint256 maxDefeats = 0;\\n        uint256 totalDefeatsSum = 0;\\n        for (uint8 i = 0; i < enemyTypesCount; i++) {\\n            uint256 d = dailyDefeats[dayId][i];\\n            totalDefeatsSum += d;\\n            if (d > maxDefeats) {\\n                maxDefeats = d;\\n                winning = i;\\n            }\\n        }\\n        require(totalDefeatsSum > 0, \\\"no defeats\\\");\\n\\n        daySettled[dayId] = true;\\n        dayWinningCoin[dayId] = winning;\\n\\n        uint256 winnersStake = stakedPerCoin[dayId][winning];\\n        dayWinnersStake[dayId] = winnersStake;\\n\\n        if (winnersStake == 0) {\\n            // No winners; per spec funds remain in contract (treasury)\\n            dayPayoutPool[dayId] = 0;\\n        } else {\\n            uint256 pool = totalStaked[dayId];\\n            uint256 payout = (pool * (BPS - FEE_BPS)) / BPS; // 80% to winners\\n            dayPayoutPool[dayId] = payout;\\n        }\\n    }\\n\\n    function claim(uint256 dayId) external {\\n        require(daySettled[dayId], \\\"not settled\\\");\\n        require(!hasClaimed[dayId][_msgSender()], \\\"claimed\\\");\\n\\n        uint8 winning = dayWinningCoin[dayId];\\n        uint256 winnersStake = dayWinnersStake[dayId];\\n        require(winnersStake > 0, \\\"no winners\\\");\\n\\n        uint256 userStake = userStakePerCoin[dayId][_msgSender()][winning];\\n        require(userStake > 0, \\\"no stake\\\");\\n\\n        uint256 payoutPool = dayPayoutPool[dayId];\\n        uint256 amount = (payoutPool * userStake) / winnersStake;\\n\\n        hasClaimed[dayId][_msgSender()] = true;\\n\\n        (bool ok, ) = payable(_msgSender()).call{ value: amount }(\\\"\\\");\\n        require(ok, \\\"transfer failed\\\");\\n    }\\n\\n    // --- Views for UI ---\\n\\n    function getDayInfo(\\n        uint256 dayId\\n    )\\n        external\\n        view\\n        returns (\\n            bool settled,\\n            uint8 winningCoin,\\n            uint256 totalPool,\\n            uint256[] memory stakesPerCoin,\\n            uint256[] memory defeatsPerCoin\\n        )\\n    {\\n        settled = daySettled[dayId];\\n        winningCoin = dayWinningCoin[dayId];\\n        totalPool = totalStaked[dayId];\\n\\n        stakesPerCoin = new uint256[](enemyTypesCount);\\n        defeatsPerCoin = new uint256[](enemyTypesCount);\\n        for (uint8 i = 0; i < enemyTypesCount; i++) {\\n            stakesPerCoin[i] = stakedPerCoin[dayId][i];\\n            defeatsPerCoin[i] = dailyDefeats[dayId][i];\\n        }\\n    }\\n\\n    function getUserStake(uint256 dayId, address user) external view returns (uint256[] memory stakesPerCoin) {\\n        stakesPerCoin = new uint256[](enemyTypesCount);\\n        for (uint8 i = 0; i < enemyTypesCount; i++) {\\n            stakesPerCoin[i] = userStakePerCoin[dayId][user][i];\\n        }\\n    }\\n\\n    function feeBasisPoints() external pure returns (uint256) {\\n        return FEE_BPS;\\n    }\\n\\n    // --- ERC2771 overrides ---\\n    function _msgSender() internal view override(Context, ERC2771Context) returns (address sender) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    function _contextSuffixLength() internal view override(Context, ERC2771Context) returns (uint256) {\\n        return ERC2771Context._contextSuffixLength();\\n    }\\n}\\n\",\"keccak256\":\"0xcd2f1886ef5c6b8f3e73683be9e9849bb636a7b7ea00bb16272f08b9405ecef5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002e0d38038062002e0d8339810160408190526200003591620002c8565b6001600160a01b0381166080526200005662000050620001bb565b620001cc565b60008560ff1611620000a15760405162461bcd60e51b815260206004820152600f60248201526e0656e656d79207479706573203d203608c1b60448201526064015b60405180910390fd5b6001600160a01b038616620000e95760405162461bcd60e51b815260206004820152600d60248201526c0706c616e657420616464723d3609c1b604482015260640162000098565b600480546001600160a01b0319166001600160a01b0388161790556000805460ff60a01b1916600160a01b60ff888116919091029190911790915584811660a081905290841660c08190526200013f916200036a565b61ffff1660e05264ffffffffff8216610100526200015c6200021c565b15620001a157600180546001600160a01b0319167372266efcdd0ec7110b44576e5413ef383950eec21790556003805460ff60a01b1916600160a01b179055620001af565b6003805460ff60a01b191690555b505050505050620003fd565b6000620001c762000236565b905090565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600046617a6914158015620001c757505061053946141590565b6000368160146080519091506001600160a01b0316331480156200025a5750808210155b1562000291576000366200026f83856200038a565b6200027c928290620003a0565b6200028791620003cc565b60601c9250505090565b339250505090565b80516001600160a01b0381168114620002b157600080fd5b919050565b805160ff81168114620002b157600080fd5b60008060008060008060c08789031215620002e257600080fd5b620002ed8762000299565b9550620002fd60208801620002b6565b94506200030d60408801620002b6565b93506200031d60608801620002b6565b9250608087015164ffffffffff811681146200033857600080fd5b91506200034860a0880162000299565b90509295509295509295565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762000384576200038462000354565b92915050565b8181038181111562000384576200038462000354565b60008085851115620003b157600080fd5b83861115620003bf57600080fd5b5050820193919092039150565b6001600160601b03198135818116916014851015620003f55780818660140360031b1b83161692505b505092915050565b60805160a05160c05160e0516101005161299a620004736000396000818161025d015281816110a5015281816111ba01528181611b6c0152611d2d015260008181610696015281816119c10152611a2d0152600061055a015260006107890152600081816104cd0152612291015261299a6000f3fe6080604052600436106102465760003560e01c80637f82426811610139578063b8606eef116100b6578063d65ab5f21161007a578063d65ab5f21461088b578063e3f3a4a9146108a0578063e90936aa146108c0578063ea68fcae146108d5578063f2fde38b146108f5578063ff61ba5c1461091557600080fd5b8063b8606eef146107ab578063bf333f2c146107c0578063c4c8889c146107d6578063c8a7884314610826578063cdea35681461085e57600080fd5b80638da5cb5b116100fd5780638da5cb5b146106cb5780639626a230146106fd578063983dfb621461072a5780639bcf4c6a1461074a578063b5bc060e1461077757600080fd5b80637f824268146105c95780638093067c146105f957806385d3d64714610619578063873f6f9e1461064957806388a944361461068457600080fd5b806350609c7d116101c7578063697ca9301161018b578063697ca93014610512578063715018a61461053357806374b6c744146105485780637b9ee6d51461057c5780637df5e9601461059c57600080fd5b806350609c7d1461040a57806352c6af821461043a5780635425beaa14610472578063572b6c05146104b057806361180738146104fd57600080fd5b80632eb5e7ac1161020e5780632eb5e7ac1461035557806333155b1b14610388578063379607f5146103aa57806341cb8c20146103ca57806343046844146103f757600080fd5b8063010cf6441461024b578063127ba5eb1461029a57806315ff8dd9146102ca5780631724ddac146102fb578063249d39e91461033f575b600080fd5b34801561025757600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b60405164ffffffffff90911681526020015b60405180910390f35b3480156102a657600080fd5b506102ba6102b53660046123cd565b610945565b6040516102919493929190612435565b3480156102d657600080fd5b506102ea6102e536600461246f565b610a2b565b6040516102919594939291906124b8565b34801561030757600080fd5b50610331610316366004612500565b6001600160a01b031660009081526006602052604090205490565b604051908152602001610291565b34801561034b57600080fd5b5061033161271081565b34801561036157600080fd5b5060005461037690600160a01b900460ff1681565b60405160ff9091168152602001610291565b34801561039457600080fd5b506103a86103a3366004612522565b610bb0565b005b3480156103b657600080fd5b506103a86103c536600461246f565b610c06565b3480156103d657600080fd5b506103316103e536600461246f565b60096020526000908152604090205481565b6103a8610405366004612576565b610ea8565b34801561041657600080fd5b5061042a610425366004612500565b611047565b6040519015158152602001610291565b34801561044657600080fd5b50610331610455366004612591565b600a60209081526000928352604080842090915290825290205481565b34801561047e57600080fd5b5061033161048d3660046125bd565b600b60209081526000938452604080852082529284528284209052825290205481565b3480156104bc57600080fd5b5061042a6104cb366004612500565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561050957600080fd5b506103a86110f3565b34801561051e57600080fd5b5060035461042a90600160a01b900460ff1681565b34801561053f57600080fd5b506103a861110a565b34801561055457600080fd5b506103767f000000000000000000000000000000000000000000000000000000000000000081565b34801561058857600080fd5b506103a86105973660046125f0565b61111e565b3480156105a857600080fd5b506103316105b736600461246f565b600f6020526000908152604090205481565b3480156105d557600080fd5b506103766105e436600461246f565b600d6020526000908152604090205460ff1681565b34801561060557600080fd5b506103a861061436600461246f565b611636565b34801561062557600080fd5b5061042a61063436600461246f565b600c6020526000908152604090205460ff1681565b34801561065557600080fd5b5061042a610664366004612665565b601060209081526000928352604080842090915290825290205460ff1681565b34801561069057600080fd5b506106b87f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610291565b3480156106d757600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610291565b34801561070957600080fd5b5061071d610718366004612665565b6117ee565b6040516102919190612688565b34801561073657600080fd5b506103a8610745366004612500565b6118c4565b34801561075657600080fd5b5061076a610765366004612500565b611934565b604051610291919061269b565b34801561078357600080fd5b506103767f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b757600080fd5b506107d0610331565b3480156107cc57600080fd5b506103316107d081565b3480156107e257600080fd5b506107f66107f1366004612500565b611afb565b604051610291949392919093845264ffffffffff9283166020850152911660408301521515606082015260800190565b34801561083257600080fd5b50610331610841366004612591565b600860209081526000928352604080842090915290825290205481565b34801561086a57600080fd5b5061033161087936600461246f565b600e6020526000908152604090205481565b34801561089757600080fd5b506103a8611bc0565b3480156108ac57600080fd5b506004546106e5906001600160a01b031681565b3480156108cc57600080fd5b5061076a611e4d565b3480156108e157600080fd5b506103a86108f0366004612576565b611e5f565b34801561090157600080fd5b506103a8610910366004612500565b611ecc565b34801561092157600080fd5b5061092a611f45565b60408051938452602084019290925290820152606001610291565b6001600160a01b0382166000908152600660205260408120805482918291606091839187908110610978576109786126ae565b6000918252602091829020600390910201805460018201546002830180546040805182880281018801909152818152949650929464ffffffffff80841695600160281b90940416939192918391830182828015610a1257602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109e35790505b5050505050905094509450945094505092959194509250565b6000818152600c6020908152604080832054600d835281842054600990935290832054925460ff9182169392821692916060918291600160a01b9091041667ffffffffffffffff811115610a8157610a816126c4565b604051908082528060200260200182016040528015610aaa578160200160208202803683370190505b50600054909250600160a01b900460ff1667ffffffffffffffff811115610ad357610ad36126c4565b604051908082528060200260200182016040528015610afc578160200160208202803683370190505b50905060005b60005460ff600160a01b90910481169082161015610ba6576000878152600a6020908152604080832060ff85168085529252909120548451909185918110610b4c57610b4c6126ae565b602090810291909101810191909152600088815260088252604080822060ff851680845293529020548351909184918110610b8957610b896126ae565b602090810291909101015280610b9e816126f0565b915050610b02565b5091939590929450565b610bb8612115565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169390911692909217909155600380546001600160a81b0319169190921617600160a01b179055565b6000818152600c602052604090205460ff16610c575760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cd95d1d1b195960aa1b60448201526064015b60405180910390fd5b600081815260106020526040812090610c6e61218e565b6001600160a01b0316815260208101919091526040016000205460ff1615610cc25760405162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b6044820152606401610c4e565b6000818152600d6020908152604080832054600e9092529091205460ff9091169080610d1d5760405162461bcd60e51b815260206004820152600a6024820152696e6f2077696e6e65727360b01b6044820152606401610c4e565b6000838152600b6020526040812081610d3461218e565b6001600160a01b031681526020808201929092526040908101600090812060ff87168252909252902054905080610d985760405162461bcd60e51b81526020600482015260086024820152676e6f207374616b6560c01b6044820152606401610c4e565b6000848152600f60205260408120549083610db3848461270f565b610dbd9190612742565b600087815260106020526040812091925060019190610dda61218e565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155610e0d61218e565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610e57576040519150601f19603f3d011682016040523d82523d6000602084013e610e5c565b606091505b5050905080610e9f5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610c4e565b50505050505050565b60003411610ee35760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610c4e565b60005460ff600160a01b909104811690821610610f2d5760405162461bcd60e51b81526020600482015260086024820152673130b21031b7b4b760c11b6044820152606401610c4e565b6000610f3c6201518042612742565b6000818152600c602052604090205490915060ff1615610f8c5760405162461bcd60e51b815260206004820152600b60248201526a19185e481cd95d1d1b195960aa1b6044820152606401610c4e565b60008181526009602052604081208054349290610faa908490612756565b90915550506000818152600a6020908152604080832060ff8616845290915281208054349290610fdb908490612756565b90915550506000818152600b602052604081203491610ff861218e565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460ff1660ff168152602001908152602001600020600082825461103e9190612756565b90915550505050565b6001600160a01b038116600090815260056020908152604080832081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff1615159082018190526110a35750600092915050565b7f000000000000000000000000000000000000000000000000000000000000000081602001516110d39190612769565b64ffffffffff164311156110ea5750600092915050565b50600192915050565b6110fb612115565b6003805460ff60a01b19169055565b611112612115565b61111c6000612198565b565b60006005600061112c61218e565b6001600160a01b03168152602080820192909252604090810160002081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff1615159082018190529091506111b85760405162461bcd60e51b815260206004820152600a60248201526937379039b2b9b9b4b7b760b11b6044820152606401610c4e565b7f000000000000000000000000000000000000000000000000000000000000000081602001516111e89190612769565b64ffffffffff164311156112305760405162461bcd60e51b815260206004820152600f60248201526e1cd95cdcda5bdb88195e1c1a5c9959608a1b6044820152606401610c4e565b600054600160a01b900460ff1682146112785760405162461bcd60e51b815260206004820152600a6024820152690c4c2c840d8cadccee8d60b31b6044820152606401610c4e565b60008267ffffffffffffffff811115611293576112936126c4565b6040519080825280602002602001820160405280156112bc578160200160208202803683370190505b50905060005b83811015611327578484828181106112dc576112dc6126ae565b90506020020160208101906112f19190612576565b828281518110611303576113036126ae565b60ff909216602092830291909101909101528061131f81612787565b9150506112c2565b506006600061133461218e565b6001600160a01b03168152602080820192909252604090810160009081208251608081018452865181528685015164ffffffffff908116828701908152438216958301958652606083018881528454600181810187559587529588902084516003909702019586559051938501805496518316600160281b0269ffffffffffffffffffff19909716949092169390931794909417909355518051929391926113e292600285019201906122f6565b505050600062015180426113f69190612742565b90506000805b858110156114aa57868682818110611416576114166126ae565b905060200201602081019061142b9190612576565b600084815260086020908152604080832060ff8681168552925282208054939091169290919061145c908490612756565b909155508790508682818110611474576114746126ae565b90506020020160208101906114899190612576565b6114969060ff1683612756565b9150806114a281612787565b9150506113fc565b506004546000906001600160a01b031663a99470296114c761218e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906127a0565b6004805460405163086001ab60e21b81529293506001600160a01b03169163218006ac9161156591859188918d918d91016127ef565b600060405180830381600087803b15801561157f57600080fd5b505af1158015611593573d6000803e3d6000fd5b5050505082816115a161218e565b6001600160a01b03167fb7af28c0f17581c5c0523f38ce21aba681bfa29a46d8cc958b43815eb974820788600001518960200151438d8d8a6040516115eb9695949392919061280f565b60405180910390a4600560006115ff61218e565b6001600160a01b0316815260208101919091526040016000908120908155600101805465ffffffffffff1916905550505050505050565b61163e612115565b6000818152600c602052604090205460ff161561168f5760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cd95d1d1b1959608a1b6044820152606401610c4e565b6000806000805b60005460ff600160a01b909104811690821610156116f957600085815260086020908152604080832060ff851684529091529020546116d58184612756565b9250838111156116e6578093508194505b50806116f1816126f0565b915050611696565b50600081116117375760405162461bcd60e51b815260206004820152600a6024820152696e6f206465666561747360b01b6044820152606401610c4e565b6000848152600c60209081526040808320805460ff19908116600117909155600d8352818420805460ff8916921682179055600a8352818420908452825280832054878452600e9092528220819055908190036117a2576000858152600f60205260408120556117e7565b600085815260096020526040812054906127106117c16107d082612853565b6117cb908461270f565b6117d59190612742565b6000888152600f602052604090205550505b5050505050565b600054606090600160a01b900460ff1667ffffffffffffffff811115611816576118166126c4565b60405190808252806020026020018201604052801561183f578160200160208202803683370190505b50905060005b60005460ff600160a01b909104811690821610156118bd576000848152600b602090815260408083206001600160a01b0387168452825280832060ff851680855292529091205483519091849181106118a0576118a06126ae565b6020908102919091010152806118b5816126f0565b915050611845565b5092915050565b6118cc612115565b6001600160a01b0381166119125760405162461bcd60e51b815260206004820152600d60248201526c0706c616e657420616464723d3609c1b6044820152606401610c4e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600560209081526040918290208251606080820185528254825260019092015464ffffffffff811693820193909352600160281b90920460ff161515928201839052916119bf5760405162461bcd60e51b815260206004820152600a60248201526937379039b2b9b9b4b7b760b11b6044820152606401610c4e565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1667ffffffffffffffff8111156119fc576119fc6126c4565b604051908082528060200260200182016040528015611a25578160200160208202803683370190505b50915060005b7f000000000000000000000000000000000000000000000000000000000000000061ffff168161ffff161015611af4578151604051600091611a8791849060200191825260f01b6001600160f01b031916602082015260220190565b60408051808303601f190181529190528051602090910120600054909150611ab990600160a01b900460ff1682612866565b848361ffff1681518110611acf57611acf6126ae565b60ff909216602092830291909101909101525080611aec8161287a565b915050611a2b565b5050919050565b6001600160a01b038116600090815260056020908152604080832081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff16151590820181905282918291829190611b68575060009350839250829150819050611bb9565b60007f00000000000000000000000000000000000000000000000000000000000000008260200151611b9a9190612769565b8251602090930151929650919450909250505064ffffffffff81164311155b9193509193565b600054600160a01b900460ff16611c065760405162461bcd60e51b815260206004820152600a6024820152696e6f20656e656d69657360b01b6044820152606401610c4e565b6004546001600160a01b031663a9947029611c1f61218e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8791906127a0565b600003611cc45760405162461bcd60e51b815260206004820152600b60248201526a1b995959081c1b185b995d60aa1b6044820152606401610c4e565b600060056000611cd261218e565b6001600160a01b03168152602080820192909252604090810160002081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff1615801591830191909152909150611da1577f00000000000000000000000000000000000000000000000000000000000000008160200151611d5b9190612769565b64ffffffffff164311611da15760405162461bcd60e51b815260206004820152600e60248201526d30b1ba34bb329039b2b9b9b4b7b760911b6044820152606401610c4e565b60078054906000611db183612787565b91905055506000611dc06121e8565b905060405180606001604052808281526020014364ffffffffff1681526020016001151581525060056000611df361218e565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001909201805493909101511515600160281b0265ffffffffffff1990931664ffffffffff909216919091179190911790555050565b6060611e5a61076561218e565b905090565b611e67612115565b60008160ff1611611eac5760405162461bcd60e51b815260206004820152600f60248201526e0656e656d79207479706573203d203608c1b6044820152606401610c4e565b6000805460ff909216600160a01b0260ff60a01b19909216919091179055565b611ed4612115565b6001600160a01b038116611f395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c4e565b611f4281612198565b50565b6000806000600360149054906101000a900460ff16611f795750642e90edd000926503a35294400092506429e8d608009150565b600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015611fe8575060408051601f3d908101601f19168201909252611fe5918101906128b5565b60015b611ff957642e90edd0009250612001565b509195505050505b600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015612070575060408051601f3d908101601f1916820190925261206d918101906128b5565b60015b612082576503a352944000915061208a565b509194505050505b600360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156120f9575060408051601f3d908101601f191682019092526120f6918101906128b5565b60015b61210957506429e8d60800909192565b50919350505050909192565b61211d61218e565b6001600160a01b03166121386000546001600160a01b031690565b6001600160a01b03161461111c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4e565b6000611e5a612281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806121f6611f45565b91945092509050612208600143612853565b404461221261218e565b6007546040805160208101959095528401929092526bffffffffffffffffffffffff19606091821b169083015260748201526094810184905260b4810183905260d481018290524260f48201526101140160405160208183030381529060405280519060200120935050505090565b6000366014336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156122be5750808210155b156122ee576000366122d08385612853565b6122db928290612905565b6122e49161292f565b60601c9250505090565b339250505090565b82805482825590600052602060002090601f0160209004810192821561238c5791602002820160005b8382111561235d57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261231f565b801561238a5782816101000a81549060ff021916905560010160208160000104928301926001030261235d565b505b5061239892915061239c565b5090565b5b80821115612398576000815560010161239d565b80356001600160a01b03811681146123c857600080fd5b919050565b600080604083850312156123e057600080fd5b6123e9836123b1565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561242a57815160ff168752958201959082019060010161240b565b509495945050505050565b848152600064ffffffffff80861660208401528085166040840152506080606083015261246560808301846123f7565b9695505050505050565b60006020828403121561248157600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561242a5781518752958201959082019060010161249c565b851515815260ff8516602082015283604082015260a0606082015260006124e260a0830185612488565b82810360808401526124f48185612488565b98975050505050505050565b60006020828403121561251257600080fd5b61251b826123b1565b9392505050565b60008060006060848603121561253757600080fd5b612540846123b1565b925061254e602085016123b1565b915061255c604085016123b1565b90509250925092565b803560ff811681146123c857600080fd5b60006020828403121561258857600080fd5b61251b82612565565b600080604083850312156125a457600080fd5b823591506125b460208401612565565b90509250929050565b6000806000606084860312156125d257600080fd5b833592506125e2602085016123b1565b915061255c60408501612565565b6000806020838503121561260357600080fd5b823567ffffffffffffffff8082111561261b57600080fd5b818501915085601f83011261262f57600080fd5b81358181111561263e57600080fd5b8660208260051b850101111561265357600080fd5b60209290920196919550909350505050565b6000806040838503121561267857600080fd5b823591506125b4602084016123b1565b60208152600061251b6020830184612488565b60208152600061251b60208301846123f7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103612706576127066126da565b60010192915050565b8082028115828204841417612726576127266126da565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826127515761275161272c565b500490565b80820180821115612726576127266126da565b64ffffffffff8181168382160190808211156118bd576118bd6126da565b600060018201612799576127996126da565b5060010190565b6000602082840312156127b257600080fd5b5051919050565b8183526000602080850194508260005b8581101561242a5760ff6127dc83612565565b16875295820195908201906001016127c9565b8481528360208201526060604082015260006124656060830184866127b9565b868152600064ffffffffff808816602084015280871660408401525060a0606083015261284060a0830185876127b9565b9050826080830152979650505050505050565b81810381811115612726576127266126da565b6000826128755761287561272c565b500690565b600061ffff808316818103612891576128916126da565b6001019392505050565b805169ffffffffffffffffffff811681146123c857600080fd5b600080600080600060a086880312156128cd57600080fd5b6128d68661289b565b94506020860151935060408601519250606086015191506128f96080870161289b565b90509295509295909350565b6000808585111561291557600080fd5b8386111561292257600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561295c5780818660140360031b1b83161692505b50509291505056fea2646970667358221220624aae786e077d1bbe4006cc084422702c2ed1d39e7b4629a8edea135812ba9464736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c80637f82426811610139578063b8606eef116100b6578063d65ab5f21161007a578063d65ab5f21461088b578063e3f3a4a9146108a0578063e90936aa146108c0578063ea68fcae146108d5578063f2fde38b146108f5578063ff61ba5c1461091557600080fd5b8063b8606eef146107ab578063bf333f2c146107c0578063c4c8889c146107d6578063c8a7884314610826578063cdea35681461085e57600080fd5b80638da5cb5b116100fd5780638da5cb5b146106cb5780639626a230146106fd578063983dfb621461072a5780639bcf4c6a1461074a578063b5bc060e1461077757600080fd5b80637f824268146105c95780638093067c146105f957806385d3d64714610619578063873f6f9e1461064957806388a944361461068457600080fd5b806350609c7d116101c7578063697ca9301161018b578063697ca93014610512578063715018a61461053357806374b6c744146105485780637b9ee6d51461057c5780637df5e9601461059c57600080fd5b806350609c7d1461040a57806352c6af821461043a5780635425beaa14610472578063572b6c05146104b057806361180738146104fd57600080fd5b80632eb5e7ac1161020e5780632eb5e7ac1461035557806333155b1b14610388578063379607f5146103aa57806341cb8c20146103ca57806343046844146103f757600080fd5b8063010cf6441461024b578063127ba5eb1461029a57806315ff8dd9146102ca5780631724ddac146102fb578063249d39e91461033f575b600080fd5b34801561025757600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b60405164ffffffffff90911681526020015b60405180910390f35b3480156102a657600080fd5b506102ba6102b53660046123cd565b610945565b6040516102919493929190612435565b3480156102d657600080fd5b506102ea6102e536600461246f565b610a2b565b6040516102919594939291906124b8565b34801561030757600080fd5b50610331610316366004612500565b6001600160a01b031660009081526006602052604090205490565b604051908152602001610291565b34801561034b57600080fd5b5061033161271081565b34801561036157600080fd5b5060005461037690600160a01b900460ff1681565b60405160ff9091168152602001610291565b34801561039457600080fd5b506103a86103a3366004612522565b610bb0565b005b3480156103b657600080fd5b506103a86103c536600461246f565b610c06565b3480156103d657600080fd5b506103316103e536600461246f565b60096020526000908152604090205481565b6103a8610405366004612576565b610ea8565b34801561041657600080fd5b5061042a610425366004612500565b611047565b6040519015158152602001610291565b34801561044657600080fd5b50610331610455366004612591565b600a60209081526000928352604080842090915290825290205481565b34801561047e57600080fd5b5061033161048d3660046125bd565b600b60209081526000938452604080852082529284528284209052825290205481565b3480156104bc57600080fd5b5061042a6104cb366004612500565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561050957600080fd5b506103a86110f3565b34801561051e57600080fd5b5060035461042a90600160a01b900460ff1681565b34801561053f57600080fd5b506103a861110a565b34801561055457600080fd5b506103767f000000000000000000000000000000000000000000000000000000000000000081565b34801561058857600080fd5b506103a86105973660046125f0565b61111e565b3480156105a857600080fd5b506103316105b736600461246f565b600f6020526000908152604090205481565b3480156105d557600080fd5b506103766105e436600461246f565b600d6020526000908152604090205460ff1681565b34801561060557600080fd5b506103a861061436600461246f565b611636565b34801561062557600080fd5b5061042a61063436600461246f565b600c6020526000908152604090205460ff1681565b34801561065557600080fd5b5061042a610664366004612665565b601060209081526000928352604080842090915290825290205460ff1681565b34801561069057600080fd5b506106b87f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610291565b3480156106d757600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610291565b34801561070957600080fd5b5061071d610718366004612665565b6117ee565b6040516102919190612688565b34801561073657600080fd5b506103a8610745366004612500565b6118c4565b34801561075657600080fd5b5061076a610765366004612500565b611934565b604051610291919061269b565b34801561078357600080fd5b506103767f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b757600080fd5b506107d0610331565b3480156107cc57600080fd5b506103316107d081565b3480156107e257600080fd5b506107f66107f1366004612500565b611afb565b604051610291949392919093845264ffffffffff9283166020850152911660408301521515606082015260800190565b34801561083257600080fd5b50610331610841366004612591565b600860209081526000928352604080842090915290825290205481565b34801561086a57600080fd5b5061033161087936600461246f565b600e6020526000908152604090205481565b34801561089757600080fd5b506103a8611bc0565b3480156108ac57600080fd5b506004546106e5906001600160a01b031681565b3480156108cc57600080fd5b5061076a611e4d565b3480156108e157600080fd5b506103a86108f0366004612576565b611e5f565b34801561090157600080fd5b506103a8610910366004612500565b611ecc565b34801561092157600080fd5b5061092a611f45565b60408051938452602084019290925290820152606001610291565b6001600160a01b0382166000908152600660205260408120805482918291606091839187908110610978576109786126ae565b6000918252602091829020600390910201805460018201546002830180546040805182880281018801909152818152949650929464ffffffffff80841695600160281b90940416939192918391830182828015610a1257602002820191906000526020600020906000905b825461010083900a900460ff168152602060019283018181049485019490930390920291018084116109e35790505b5050505050905094509450945094505092959194509250565b6000818152600c6020908152604080832054600d835281842054600990935290832054925460ff9182169392821692916060918291600160a01b9091041667ffffffffffffffff811115610a8157610a816126c4565b604051908082528060200260200182016040528015610aaa578160200160208202803683370190505b50600054909250600160a01b900460ff1667ffffffffffffffff811115610ad357610ad36126c4565b604051908082528060200260200182016040528015610afc578160200160208202803683370190505b50905060005b60005460ff600160a01b90910481169082161015610ba6576000878152600a6020908152604080832060ff85168085529252909120548451909185918110610b4c57610b4c6126ae565b602090810291909101810191909152600088815260088252604080822060ff851680845293529020548351909184918110610b8957610b896126ae565b602090810291909101015280610b9e816126f0565b915050610b02565b5091939590929450565b610bb8612115565b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169390911692909217909155600380546001600160a81b0319169190921617600160a01b179055565b6000818152600c602052604090205460ff16610c575760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081cd95d1d1b195960aa1b60448201526064015b60405180910390fd5b600081815260106020526040812090610c6e61218e565b6001600160a01b0316815260208101919091526040016000205460ff1615610cc25760405162461bcd60e51b815260206004820152600760248201526618db185a5b595960ca1b6044820152606401610c4e565b6000818152600d6020908152604080832054600e9092529091205460ff9091169080610d1d5760405162461bcd60e51b815260206004820152600a6024820152696e6f2077696e6e65727360b01b6044820152606401610c4e565b6000838152600b6020526040812081610d3461218e565b6001600160a01b031681526020808201929092526040908101600090812060ff87168252909252902054905080610d985760405162461bcd60e51b81526020600482015260086024820152676e6f207374616b6560c01b6044820152606401610c4e565b6000848152600f60205260408120549083610db3848461270f565b610dbd9190612742565b600087815260106020526040812091925060019190610dda61218e565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155610e0d61218e565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610e57576040519150601f19603f3d011682016040523d82523d6000602084013e610e5c565b606091505b5050905080610e9f5760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b6044820152606401610c4e565b50505050505050565b60003411610ee35760405162461bcd60e51b81526020600482015260086024820152676e6f2076616c756560c01b6044820152606401610c4e565b60005460ff600160a01b909104811690821610610f2d5760405162461bcd60e51b81526020600482015260086024820152673130b21031b7b4b760c11b6044820152606401610c4e565b6000610f3c6201518042612742565b6000818152600c602052604090205490915060ff1615610f8c5760405162461bcd60e51b815260206004820152600b60248201526a19185e481cd95d1d1b195960aa1b6044820152606401610c4e565b60008181526009602052604081208054349290610faa908490612756565b90915550506000818152600a6020908152604080832060ff8616845290915281208054349290610fdb908490612756565b90915550506000818152600b602052604081203491610ff861218e565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008460ff1660ff168152602001908152602001600020600082825461103e9190612756565b90915550505050565b6001600160a01b038116600090815260056020908152604080832081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff1615159082018190526110a35750600092915050565b7f000000000000000000000000000000000000000000000000000000000000000081602001516110d39190612769565b64ffffffffff164311156110ea5750600092915050565b50600192915050565b6110fb612115565b6003805460ff60a01b19169055565b611112612115565b61111c6000612198565b565b60006005600061112c61218e565b6001600160a01b03168152602080820192909252604090810160002081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff1615159082018190529091506111b85760405162461bcd60e51b815260206004820152600a60248201526937379039b2b9b9b4b7b760b11b6044820152606401610c4e565b7f000000000000000000000000000000000000000000000000000000000000000081602001516111e89190612769565b64ffffffffff164311156112305760405162461bcd60e51b815260206004820152600f60248201526e1cd95cdcda5bdb88195e1c1a5c9959608a1b6044820152606401610c4e565b600054600160a01b900460ff1682146112785760405162461bcd60e51b815260206004820152600a6024820152690c4c2c840d8cadccee8d60b31b6044820152606401610c4e565b60008267ffffffffffffffff811115611293576112936126c4565b6040519080825280602002602001820160405280156112bc578160200160208202803683370190505b50905060005b83811015611327578484828181106112dc576112dc6126ae565b90506020020160208101906112f19190612576565b828281518110611303576113036126ae565b60ff909216602092830291909101909101528061131f81612787565b9150506112c2565b506006600061133461218e565b6001600160a01b03168152602080820192909252604090810160009081208251608081018452865181528685015164ffffffffff908116828701908152438216958301958652606083018881528454600181810187559587529588902084516003909702019586559051938501805496518316600160281b0269ffffffffffffffffffff19909716949092169390931794909417909355518051929391926113e292600285019201906122f6565b505050600062015180426113f69190612742565b90506000805b858110156114aa57868682818110611416576114166126ae565b905060200201602081019061142b9190612576565b600084815260086020908152604080832060ff8681168552925282208054939091169290919061145c908490612756565b909155508790508682818110611474576114746126ae565b90506020020160208101906114899190612576565b6114969060ff1683612756565b9150806114a281612787565b9150506113fc565b506004546000906001600160a01b031663a99470296114c761218e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f91906127a0565b6004805460405163086001ab60e21b81529293506001600160a01b03169163218006ac9161156591859188918d918d91016127ef565b600060405180830381600087803b15801561157f57600080fd5b505af1158015611593573d6000803e3d6000fd5b5050505082816115a161218e565b6001600160a01b03167fb7af28c0f17581c5c0523f38ce21aba681bfa29a46d8cc958b43815eb974820788600001518960200151438d8d8a6040516115eb9695949392919061280f565b60405180910390a4600560006115ff61218e565b6001600160a01b0316815260208101919091526040016000908120908155600101805465ffffffffffff1916905550505050505050565b61163e612115565b6000818152600c602052604090205460ff161561168f5760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e481cd95d1d1b1959608a1b6044820152606401610c4e565b6000806000805b60005460ff600160a01b909104811690821610156116f957600085815260086020908152604080832060ff851684529091529020546116d58184612756565b9250838111156116e6578093508194505b50806116f1816126f0565b915050611696565b50600081116117375760405162461bcd60e51b815260206004820152600a6024820152696e6f206465666561747360b01b6044820152606401610c4e565b6000848152600c60209081526040808320805460ff19908116600117909155600d8352818420805460ff8916921682179055600a8352818420908452825280832054878452600e9092528220819055908190036117a2576000858152600f60205260408120556117e7565b600085815260096020526040812054906127106117c16107d082612853565b6117cb908461270f565b6117d59190612742565b6000888152600f602052604090205550505b5050505050565b600054606090600160a01b900460ff1667ffffffffffffffff811115611816576118166126c4565b60405190808252806020026020018201604052801561183f578160200160208202803683370190505b50905060005b60005460ff600160a01b909104811690821610156118bd576000848152600b602090815260408083206001600160a01b0387168452825280832060ff851680855292529091205483519091849181106118a0576118a06126ae565b6020908102919091010152806118b5816126f0565b915050611845565b5092915050565b6118cc612115565b6001600160a01b0381166119125760405162461bcd60e51b815260206004820152600d60248201526c0706c616e657420616464723d3609c1b6044820152606401610c4e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600560209081526040918290208251606080820185528254825260019092015464ffffffffff811693820193909352600160281b90920460ff161515928201839052916119bf5760405162461bcd60e51b815260206004820152600a60248201526937379039b2b9b9b4b7b760b11b6044820152606401610c4e565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1667ffffffffffffffff8111156119fc576119fc6126c4565b604051908082528060200260200182016040528015611a25578160200160208202803683370190505b50915060005b7f000000000000000000000000000000000000000000000000000000000000000061ffff168161ffff161015611af4578151604051600091611a8791849060200191825260f01b6001600160f01b031916602082015260220190565b60408051808303601f190181529190528051602090910120600054909150611ab990600160a01b900460ff1682612866565b848361ffff1681518110611acf57611acf6126ae565b60ff909216602092830291909101909101525080611aec8161287a565b915050611a2b565b5050919050565b6001600160a01b038116600090815260056020908152604080832081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff16151590820181905282918291829190611b68575060009350839250829150819050611bb9565b60007f00000000000000000000000000000000000000000000000000000000000000008260200151611b9a9190612769565b8251602090930151929650919450909250505064ffffffffff81164311155b9193509193565b600054600160a01b900460ff16611c065760405162461bcd60e51b815260206004820152600a6024820152696e6f20656e656d69657360b01b6044820152606401610c4e565b6004546001600160a01b031663a9947029611c1f61218e565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8791906127a0565b600003611cc45760405162461bcd60e51b815260206004820152600b60248201526a1b995959081c1b185b995d60aa1b6044820152606401610c4e565b600060056000611cd261218e565b6001600160a01b03168152602080820192909252604090810160002081516060810183528154815260019091015464ffffffffff811693820193909352600160281b90920460ff1615801591830191909152909150611da1577f00000000000000000000000000000000000000000000000000000000000000008160200151611d5b9190612769565b64ffffffffff164311611da15760405162461bcd60e51b815260206004820152600e60248201526d30b1ba34bb329039b2b9b9b4b7b760911b6044820152606401610c4e565b60078054906000611db183612787565b91905055506000611dc06121e8565b905060405180606001604052808281526020014364ffffffffff1681526020016001151581525060056000611df361218e565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001909201805493909101511515600160281b0265ffffffffffff1990931664ffffffffff909216919091179190911790555050565b6060611e5a61076561218e565b905090565b611e67612115565b60008160ff1611611eac5760405162461bcd60e51b815260206004820152600f60248201526e0656e656d79207479706573203d203608c1b6044820152606401610c4e565b6000805460ff909216600160a01b0260ff60a01b19909216919091179055565b611ed4612115565b6001600160a01b038116611f395760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c4e565b611f4281612198565b50565b6000806000600360149054906101000a900460ff16611f795750642e90edd000926503a35294400092506429e8d608009150565b600160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015611fe8575060408051601f3d908101601f19168201909252611fe5918101906128b5565b60015b611ff957642e90edd0009250612001565b509195505050505b600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015612070575060408051601f3d908101601f1916820190925261206d918101906128b5565b60015b612082576503a352944000915061208a565b509194505050505b600360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa9250505080156120f9575060408051601f3d908101601f191682019092526120f6918101906128b5565b60015b61210957506429e8d60800909192565b50919350505050909192565b61211d61218e565b6001600160a01b03166121386000546001600160a01b031690565b6001600160a01b03161461111c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4e565b6000611e5a612281565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000806121f6611f45565b91945092509050612208600143612853565b404461221261218e565b6007546040805160208101959095528401929092526bffffffffffffffffffffffff19606091821b169083015260748201526094810184905260b4810183905260d481018290524260f48201526101140160405160208183030381529060405280519060200120935050505090565b6000366014336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156122be5750808210155b156122ee576000366122d08385612853565b6122db928290612905565b6122e49161292f565b60601c9250505090565b339250505090565b82805482825590600052602060002090601f0160209004810192821561238c5791602002820160005b8382111561235d57835183826101000a81548160ff021916908360ff160217905550926020019260010160208160000104928301926001030261231f565b801561238a5782816101000a81549060ff021916905560010160208160000104928301926001030261235d565b505b5061239892915061239c565b5090565b5b80821115612398576000815560010161239d565b80356001600160a01b03811681146123c857600080fd5b919050565b600080604083850312156123e057600080fd5b6123e9836123b1565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561242a57815160ff168752958201959082019060010161240b565b509495945050505050565b848152600064ffffffffff80861660208401528085166040840152506080606083015261246560808301846123f7565b9695505050505050565b60006020828403121561248157600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561242a5781518752958201959082019060010161249c565b851515815260ff8516602082015283604082015260a0606082015260006124e260a0830185612488565b82810360808401526124f48185612488565b98975050505050505050565b60006020828403121561251257600080fd5b61251b826123b1565b9392505050565b60008060006060848603121561253757600080fd5b612540846123b1565b925061254e602085016123b1565b915061255c604085016123b1565b90509250925092565b803560ff811681146123c857600080fd5b60006020828403121561258857600080fd5b61251b82612565565b600080604083850312156125a457600080fd5b823591506125b460208401612565565b90509250929050565b6000806000606084860312156125d257600080fd5b833592506125e2602085016123b1565b915061255c60408501612565565b6000806020838503121561260357600080fd5b823567ffffffffffffffff8082111561261b57600080fd5b818501915085601f83011261262f57600080fd5b81358181111561263e57600080fd5b8660208260051b850101111561265357600080fd5b60209290920196919550909350505050565b6000806040838503121561267857600080fd5b823591506125b4602084016123b1565b60208152600061251b6020830184612488565b60208152600061251b60208301846123f7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff8103612706576127066126da565b60010192915050565b8082028115828204841417612726576127266126da565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826127515761275161272c565b500490565b80820180821115612726576127266126da565b64ffffffffff8181168382160190808211156118bd576118bd6126da565b600060018201612799576127996126da565b5060010190565b6000602082840312156127b257600080fd5b5051919050565b8183526000602080850194508260005b8581101561242a5760ff6127dc83612565565b16875295820195908201906001016127c9565b8481528360208201526060604082015260006124656060830184866127b9565b868152600064ffffffffff808816602084015280871660408401525060a0606083015261284060a0830185876127b9565b9050826080830152979650505050505050565b81810381811115612726576127266126da565b6000826128755761287561272c565b500690565b600061ffff808316818103612891576128916126da565b6001019392505050565b805169ffffffffffffffffffff811681146123c857600080fd5b600080600080600060a086880312156128cd57600080fd5b6128d68661289b565b94506020860151935060408601519250606086015191506128f96080870161289b565b90509295509295909350565b6000808585111561291557600080fd5b8386111561292257600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff19813581811691601485101561295c5780818660140360031b1b83161692505b50509291505056fea2646970667358221220624aae786e077d1bbe4006cc084422702c2ed1d39e7b4629a8edea135812ba9464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setPlanetNFT(address)": {
        "notice": "Update PlanetNFT contract reference in case of redeploys"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 357,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "enemyTypesCount",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 360,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "ethPriceFeed",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)317"
      },
      {
        "astId": 363,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "btcPriceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)317"
      },
      {
        "astId": 366,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "pufEthPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)317"
      },
      {
        "astId": 368,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "priceFeedsEnabled",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 371,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "planetNFT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IPlanetNFT)343"
      },
      {
        "astId": 399,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "_activeSession",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Session)384_storage)"
      },
      {
        "astId": 405,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "_plays",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Play)394_storage)dyn_storage)"
      },
      {
        "astId": 407,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "_nonce",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 413,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "dailyDefeats",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 417,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "totalStaked",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 423,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "stakedPerCoin",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))"
      },
      {
        "astId": 431,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "userStakePerCoin",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint8,t_uint256)))"
      },
      {
        "astId": 435,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "daySettled",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 439,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "dayWinningCoin",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint8)"
      },
      {
        "astId": 443,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "dayWinnersStake",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 447,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "dayPayoutPool",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 453,
        "contract": "contracts/GameEngine.sol:GameEngine",
        "label": "hasClaimed",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Play)394_storage)dyn_storage": {
        "base": "t_struct(Play)394_storage",
        "encoding": "dynamic_array",
        "label": "struct GameEngine.Play[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)317": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IPlanetNFT)343": {
        "encoding": "inplace",
        "label": "contract IPlanetNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Play)394_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GameEngine.Play[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Play)394_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Session)384_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GameEngine.Session)",
        "numberOfBytes": "32",
        "value": "t_struct(Session)384_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint8,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint8 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint8,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Play)394_storage": {
        "encoding": "inplace",
        "label": "struct GameEngine.Play",
        "members": [
          {
            "astId": 386,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 388,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "startBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 390,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "endBlock",
            "offset": 5,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 393,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "counts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint8)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Session)384_storage": {
        "encoding": "inplace",
        "label": "struct GameEngine.Session",
        "members": [
          {
            "astId": 379,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "seed",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 381,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "startBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 383,
            "contract": "contracts/GameEngine.sol:GameEngine",
            "label": "exists",
            "offset": 5,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}